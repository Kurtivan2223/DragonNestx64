//variabile locale pt count.
local int actID = 0;
local int SignalID = 0;
local int DEBUG = 0;

typedef enum <int>
{
    LEFT_CLICK,
    RIGHT_CLICK,
    MOUSE_WHEEL_CLICK,
    MOVE_FRONT,
    MOVE_BACK,
    MOVE_LEFT,
    MOVE_RIGHT,
    JUMP,
    PICK_ITEM,
    R_KEY,
} eButton;

typedef int BOOL;
typedef char BOOL8; 
typedef int Pointer;


typedef enum <int>
{
    no,
    yes
} bool;

// D3D ARRAYS
typedef struct
{
  float x;
  float y;
} D3DXVECTOR2 <optimize=false>; //D3DXVECTOR2

typedef struct
{
  float x;
  float y;
  float z;
} D3DXVECTOR3 <optimize=false>; //D3DXVECTOR3


typedef struct
{
  float x;
  float y;
  float z;
  float w;
} D3DXVECTOR4 <optimize=false>; //D3DXVECTOR4

typedef struct
{
  int VectorID;
} VectorIndexes  <optimize=false>;

typedef struct
{
    int m_nVecStrIndex;
} VecStrIndex <optimize=false>;


//SEMNALE!

struct DnNullSignalStruct
{
	char cReserved1[256];
};

struct SummonMonsterStruct
{
	int MonsterID;
	int Vec3_vPosition;
	int nLifeTime;
	int nTeam;
	int nMaxCount;
	bool bCopySummonerState;
	float fHPAdjustValue;
	int nSummonRate;
	char cReserved1[224];
};

//END SEMNALE

typedef struct
{
    int size;
    if(size > 0)
    {
        BYTE data[size];
        //Printf("Signal [%d] : %s\n",SignalID,data);
    }
    
} ActionSignal <optimize=false>;

typedef struct
{
    int m_nSignalIndex<bgcolor=cYellow>; // = b.ReadInt32();
    int m_nStartFrame; // = b.ReadInt32();
    int m_nEndFrame; // = b.ReadInt32();
    int m_nOrder; // = b.ReadInt32();
    

   int  m_pData[64] <format=hex>;// = new Byte[256];



 /*   
    if(m_pData[22] == 1)
    {
        Printf("WriteByte(0x%X,0x01);\n",startof(m_pData[22]));
        // Printf("Signal[0x%X] error server damage\n",startof(m_pData[22]));
    }
    if(m_pData[22] == 1)
    {
        Printf("fixActSkillDamage(%d,%d); // offset = %.2X  NAME: %s \n",actID-1,SignalID,startof(m_pData[22]),szName);
        // Printf("Signal[0x%X] error server damage\n",startof(m_pData[22]));
    }
    if(m_pData[22] == 2)
    {
        Printf("WriteByte(0x%X,0x01); //atentie 0x02\n",startof(m_pData[22]));
        // Printf("Signal[0x%X] error server damage\n",startof(m_pData[22]));
    }
*/

    int nTableCount;

    if( nTableCount > 0 )
    {
        VectorIndexes vecindex[nTableCount];
        D3DXVECTOR2 dx2[nTableCount];
    }

    int nTableCount2;

    if( nTableCount2 > 0 )
    {
        VectorIndexes vecindex[nTableCount2];
        D3DXVECTOR3 dx3[nTableCount2];
    }

    int nTableCount3;

    if( nTableCount3 > 0 )
    {
        VectorIndexes vecindex[nTableCount3];
        D3DXVECTOR4 dx4[nTableCount3];
    }

    int nTableCount4;

    if( nTableCount4 > 0 )
    {
        VecStrIndex vecstrindex[nTableCount4];
        ActionSignal as[nTableCount4];
    }
    
    if(nVersion >= 6)
    {
        byte act6[1];
    }

    if( nTableCount4 > 0 )
    {
        //do sonething..
    }

    SignalID++;

} Signal <optimize=false>;

typedef struct
{
    int szNameINT;
    char szName[szNameINT] <bgcolor=cRed>;
    int szLinkAniNameINT;// = b.ReadInt32();
    char szLinkAniName[szLinkAniNameINT]; // = b.ReadChars(szLinkAniNameINT);

    DWORD dwLength;// = b.ReadUInt32();
    int szNextActionNameINT;// = b.ReadInt32();
    char szNextActionName[szNextActionNameINT] <bgcolor=cGreen>;// = b.ReadChars(szNextActionNameINT);
    DWORD dwBlendFrame; //= b.ReadUInt32(); 
    DWORD dwNextActionFrame; //= b.ReadUInt32();

    if(nVersion >= 2)
    {
        int act2;
    }

    if(nVersion >= 3)
    {
        int act3;
    }

    if(nVersion >= 4)
    {
        BOOL8 act4;
    }

    if(nVersion >= 5)
    {
        int act5;
    }

    if(nVersion >= 6)
    {
        byte act6[1];
    }

    Printf( "Act Name[%d]: %s  LinkAniName: %s szNextActionName: %s\n", actID ,  szName, szLinkAniName, szNextActionName);

    actID++;
    int nSignalCount; //= b.ReadInt32();

    if(nSignalCount > 0)
    {
        Signal sg[nSignalCount];
    } 

    SignalID=0;//resetam signal id!!   
} Action <optimize=false>;

struct ACT_EDITOR
{
    char Header[32];
    int nVersion;
    int nActionCount;
    if(nActionCount > 0)
    Action ac[nActionCount];
} act;