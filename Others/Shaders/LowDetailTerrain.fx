#include "CalcFog.fxh"
//////////////////////////////////////////////////////////////////////////////////////////////
// World Mat Param
//////////////////////////////////////////////////////////////////////////////////////////////
float4x4 g_WorldViewMat		: WORLDVIEW;
float4x4 g_ProjMat		: PROJ;

//////////////////////////////////////////////////////////////////////////////////////////////
// Shared Param
//////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////
// Global Param
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
// Custom Param
//////////////////////////////////////////////////////////////////////////////////////////////

float4 g_fPixelSize;
float4 g_TerrainBlockSize;

float4 g_MaterialDiffuse : MATERIALDIFFUSE
<
    string UIName = "Material Diffuse";
> = { 0.8f, 0.8f, 0.8f, 1.0f};
float4 g_MaterialAmbient : MATERIALAMBIENT
<
    string UIName = "Material Ambient";
> = { 0.8f, 0.8f, 0.8f, 1.0f};

texture2D g_EntireTex : ENTIRETEXTURE
< 
	string UIName = "Entire Texture";
>;
sampler2D g_EntireSampler = sampler_state
{
	Texture = < g_EntireTex >;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = Linear;
};


//////////////////////////////////////////////////////////////////////////////////////////////
// Vertex Buffer Declaration
//////////////////////////////////////////////////////////////////////////////////////////////
struct VertexInput
{
    float3 Position				: POSITION;
};

struct VertexOutput 
{
    float4 Position				: POSITION;
    float4 Fog		    		: TEXCOORD0;
    float2 LightMapCoord		: TEXCOORD1;
};

struct PixelOutput
{
	float4 Color				: COLOR0;
};

//////////////////////////////////////////////////////////////////////////////////////////////
// Start Vertex Shader
//////////////////////////////////////////////////////////////////////////////////////////////
VertexOutput LayeredTerrainVS( VertexInput Input ) 
{
	VertexOutput Output;
	
	float3 WorldViewPos = mul( float4( Input.Position.xyz, 1.0f ), g_WorldViewMat );
	Output.Position = mul( float4( WorldViewPos, 1.0f ), g_ProjMat );

	Output.Fog.zw = CalcFogValue( Output.Position.z );																			
	float2 ScreenCoord = Output.Position.xy / Output.Position.w;
	Output.Fog.xy = ( ScreenCoord + 1.0f ) * 0.5f;
	Output.Fog.y = 1.0f - Output.Fog.y;

	Output.LightMapCoord = Input.Position.xz / g_TerrainBlockSize + g_fPixelSize.xy;
	
	return Output;
}
//////////////////////////////////////////////////////////////////////////////////////////////
// Start Pixel Shader
//////////////////////////////////////////////////////////////////////////////////////////////

PixelOutput LayeredTerrainPS( VertexOutput Input ) : COLOR
{
	PixelOutput Output;
	
	Output.Color = tex2D( g_EntireSampler, Input.LightMapCoord ) * 1.2;
	Output.Color.xyz = CalcFogColor( Output.Color.xyz, Input.Fog );
	
	return Output;
}


//////////////////////////////////////////////////////////////////////////////////////////////
// Start Technique
//////////////////////////////////////////////////////////////////////////////////////////////
technique LayeredTerrainTech
{
    pass p0 
    {		
		VertexShader = compile vs_2_0 LayeredTerrainVS();
		PixelShader  = compile ps_2_0 LayeredTerrainPS();
    }
}
