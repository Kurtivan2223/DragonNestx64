//////////////////////////////////////////////////////////////////////////////////////////////
// Global Variable
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
// Custom Param
//////////////////////////////////////////////////////////////////////////////////////////////
texture2D g_BackBuffer : BACKBUFFER;
sampler2D g_BackBufferSampler = sampler_state
{
	Texture = < g_BackBuffer >;
    AddressU = Clamp;
    AddressV = Clamp;
	MinFilter = Point;
	MagFilter = Point;
	MipFilter = None;
};

float2 g_BlurCenter		: BLURCENTER;
float g_fBlurSize		: BLURSIZE;

//////////////////////////////////////////////////////////////////////////////////////////////
// Vertex Buffer Declaration
//////////////////////////////////////////////////////////////////////////////////////////////
struct VertexInput
{
    float3 Position				: POSITION;
    float2 TexCoord0			: TEXCOORD0;
};

struct VertexOutput
{
    float4 Position				: POSITION;
    float2 TexCoord0			: TEXCOORD0;
};

#define NSAMPLES 16
#define INVNSAMPLESMINUS 1.0f / ( NSAMPLES - 1.0f )
#define INVSAMPLES		1.0f / NSAMPLES

//////////////////////////////////////////////////////////////////////////////////////////////
// Start Vertex Shader
//////////////////////////////////////////////////////////////////////////////////////////////
VertexOutput RadialBlurFilterVS( VertexInput Input ) 
{
	VertexOutput Output;
	
	Output.Position = float4( Input.Position, 1.0f );
	Output.TexCoord0 = Input.TexCoord0;

	return Output;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// Start Pixel Shader
//////////////////////////////////////////////////////////////////////////////////////////////
float4 RadialBlurFilterPS( VertexOutput Input ) : COLOR0
{
	int i;
    float4 Result = 0;
	float2 TexCoord = Input.TexCoord0 - g_BlurCenter;

    for( i = 0; i < NSAMPLES; i++ )
	{
    	float fScale = 1.0f - g_fBlurSize * INVNSAMPLESMINUS * i;
    	Result += tex2D( g_BackBufferSampler, TexCoord * fScale + g_BlurCenter );
    }
    Result *= INVSAMPLES;

    return Result;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// Start Technique
//////////////////////////////////////////////////////////////////////////////////////////////
technique DOFFilterTech
{
    pass p0 
    {		
		VertexShader = compile vs_2_0 RadialBlurFilterVS();
		PixelShader  = compile ps_2_0 RadialBlurFilterPS();
    }
}

